{"version":3,"sources":["reducers/message.js","reducers/timer.js","reducers/index.js","components/Forms.js","actions/index.js","containers/InputForm.js","components/CountdownDisplay.js","containers/Display.js","components/App.js","serviceWorker.js","index.js"],"names":["message","state","arguments","length","undefined","action","type","timer","secondsLeft","Object","objectSpread","combineReducers","Forms","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleInputChange","event","setState","defineProperty","target","name","value","validateInput","input","RegExp","test","startCountdown","_this$props","setTime","setMsg","setTimer","clearInterval","start","end","startArr","split","endArr","startSec","parseInt","endSec","time","setInterval","react_default","a","createElement","className","style","margin","onChange","onClick","Component","setMessage","connect","dispatch","countdownDisplay","_ref","backgroundColor","CountdownDisplay","App","InputForm","Display","Boolean","window","location","hostname","match","store","createStore","rootReducer","ReactDOM","render","es","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f98fe8f.chunk.js","sourcesContent":["const message = (state = \"\", action) => {\n  switch (action.type) {\n    case \"SET_MESSAGE\":\n      return action.message;\n    default:\n      return state;\n  }\n};\nexport default message;\n","const timer = (state = { secondsLeft: 0, timer: 0 }, action) => {\n  switch (action.type) {\n    case \"SET_TIME\":\n      return { ...state, secondsLeft: action.secondsLeft };\n    case \"SET_TIMER\":\n      return { ...state, timer: action.timer };\n    default:\n      return state;\n  }\n};\nexport default timer;\n","import { combineReducers } from \"redux\";\nimport message from \"./message\";\nimport timer from \"./timer\";\n\nexport default combineReducers({\n  timer,\n  message\n});\n","import React, { Component } from \"react\";\nimport \"./Forms.css\";\nclass Forms extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      start: \"\",\n      end: \"\"\n    };\n  }\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value });\n  };\n  validateInput = input => {\n    const regex = new RegExp(\n      \"^([0-1][0-9]|[2][0-3]):([0-5][0-9]):([0-5][0-9])$\"\n    );\n    return regex.test(input);\n  };\n  startCountdown = () => {\n    let { setTime, setMsg, timer, setTimer } = this.props;\n    clearInterval(timer);\n    if (\n      this.validateInput(this.state.start) &&\n      this.validateInput(this.state.end)\n    ) {\n      let startArr = this.state.start.split(\":\");\n      let endArr = this.state.end.split(\":\");\n      let startSec =\n        parseInt(startArr[0]) * 3600 +\n        parseInt(startArr[1]) * 60 +\n        parseInt(startArr[2]);\n      let endSec =\n        parseInt(endArr[0]) * 3600 +\n        parseInt(endArr[1]) * 60 +\n        parseInt(endArr[2]);\n      if (endSec <= startSec) {\n        setMsg(\"end time must be greater than start time\");\n      } else {\n        let time = endSec - startSec;\n        setMsg(\"\");\n        setTime(time);\n        let newTimer = setInterval(\n          () => {\n            setTime(--time);\n          },\n          1000,\n          time\n        );\n        setTimer(newTimer);\n      }\n    } else {\n      setMsg(\"Please check your time format\");\n    }\n  };\n  render() {\n    return (\n      <div className=\"Form\">\n        <div style={{ margin: \"10px\" }}>\n          <label className=\"Label\">Start time (hh:mm:ss)</label>\n          <input type=\"text\" onChange={this.handleInputChange} name=\"start\" />\n        </div>\n        <div style={{ margin: \"10px\" }}>\n          <label className=\"Label\">End time (hh:mm:ss)</label>\n          <input type=\"text\" onChange={this.handleInputChange} name=\"end\" />\n        </div>\n        <button onClick={this.startCountdown}>Start Countdown</button>\n      </div>\n    );\n  }\n}\n\nexport default Forms;\n","export const setTime = secondsLeft => {\n  return { type: \"SET_TIME\", secondsLeft };\n};\nexport const setTimer = timer => {\n  return { type: \"SET_TIMER\", timer };\n};\nexport const setMessage = message => {\n  return {\n    type: \"SET_MESSAGE\",\n    message\n  };\n};\n","import Forms from \"../components/Forms\";\nimport { connect } from \"react-redux\";\nimport { setMessage, setTimer, setTime } from \"../actions\";\nconst mapStateToProps = state => {\n  return { secondsLeft: state.timer.secondsLeft, timer: state.timer.timer };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setMsg: message => dispatch(setMessage(message)),\n    setTime: time => dispatch(setTime(time)),\n    setTimer: timer => dispatch(setTimer(timer))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Forms);\n","import React from \"react\";\nconst countdownDisplay = ({ message, secondsLeft, timer }) => {\n  if (secondsLeft === 0) clearInterval(timer);\n  return (\n    <div style={{ backgroundColor: \"#FFFFFF\", margin: \"0 20px 0 20px\" }}>\n      <span>{message ? message : \"Time left: \" + secondsLeft}</span>\n    </div>\n  );\n};\n\nexport default countdownDisplay;\n","import CountdownDisplay from \"../components/CountdownDisplay\";\nimport { connect } from \"react-redux\";\nimport { setMessage, setTimer } from \"../actions\";\nconst mapStateToProps = state => {\n  return {\n    message: state.message,\n    secondsLeft: state.timer.secondsLeft,\n    timer: state.timer.timer\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    setMsg: message => dispatch(setMessage(message)),\n    setTime: timer => dispatch(setTimer(timer))\n  };\n};\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(CountdownDisplay);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport InputForm from \"../containers/InputForm\";\nimport Display from \"../containers/Display\";\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"Mid\">\n          <h1>Simple Countdown Timer</h1>\n          <InputForm />\n          <Display />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore(rootReducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}